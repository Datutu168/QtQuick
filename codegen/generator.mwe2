module xpand.example.Generator

import org.eclipse.emf.mwe.utils.Reader
import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.emf.mwe.utils.DirectoryCleaner
import org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel
import org.eclipse.xtend.check.CheckComponent
import org.eclipse.xpand2.Generator
import org.eclipse.xpand2.output.JavaBeautifier
import org.eclipse.xtend.expression.ResourceManagerDefaultImpl

var modelUri  = "platform:/resource/QtQuick/model/QtQuickInstance.xmi"
var metaModelUri = "platform:/resource/QtQuick/model/qtQuick.ecore"
var outDir = "QtQuickSampleUI"


Workflow {
	/* set up EMF for standalone execution */
	bean = StandaloneSetup {
		platformUri="."
		registerEcoreFile = metaModelUri
	}
	

	/** instantiate metamodel */
	bean = EmfRegistryMetaModel : mm_emf { }

	/* load model and store it in slot 'model' */
	component = Reader {
		uri = modelUri
		modelSlot = "model"
	}
	
//	 TODO code indentation in qml beautifier
//	bean = JavaBeautifier : formatter_java { }

	/* check model */
//	component = CheckComponent {
//		metaModel = mm_emf
//		checkFile = "metamodel::Checks"
//		emfAllChildrenSlot = "model"
//	}

	/** Clear output directory */
//	component = DirectoryCleaner {
//		directory = dirSrcGen
//	}

	/* generate code */
	component = Generator {
		metaModel = mm_emf
		expand = "Template::main FOR model"
		outlet = {
			path = outDir
//			postprocessor = formatter_java
			fileEncoding = "UTF-8" // this is the encoding for files written the outlet
		}
		// configure Xpand resource encoding (check project resource setting)
		resourceManager = ResourceManagerDefaultImpl {
			fileEncoding = "UTF-8"
		}
	}
}